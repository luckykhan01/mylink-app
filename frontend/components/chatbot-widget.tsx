"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { MessageCircle, X, Send, Loader2 } from "lucide-react"
import { cn } from "@/lib/utils"
import { api } from "@/lib/api"

interface ChatbotWidgetProps {
  applicationId: string
  vacancyId: string
  onAnalysisComplete?: (analysis: any) => void
  embedded?: boolean // –ï—Å–ª–∏ true, –≤–∏–¥–∂–µ—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±–µ–∑ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏
  autoStart?: boolean // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
}

export function ChatbotWidget({ applicationId, vacancyId, onAnalysisComplete, embedded = false, autoStart = false }: ChatbotWidgetProps) {
  const [isOpen, setIsOpen] = useState(embedded ? true : false)
  const [inputValue, setInputValue] = useState("")
  const [questionCount, setQuestionCount] = useState(0)
  const [isLoading, setIsLoading] = useState(false)
  const [sessionId, setSessionId] = useState<string | null>(null)
  const [analysisStarted, setAnalysisStarted] = useState(false) // –§–ª–∞–≥ —á—Ç–æ –∞–Ω–∞–ª–∏–∑ —É–∂–µ –∑–∞–ø—É—â–µ–Ω
  const [relevancePercent, setRelevancePercent] = useState<number | null>(null) // –¢–µ–∫—É—â–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
  const [isDialogCompleted, setIsDialogCompleted] = useState(false) // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
  const [showAlternativeVacancies, setShowAlternativeVacancies] = useState(false) // –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  const [alternativeVacancies, setAlternativeVacancies] = useState<any[]>([]) // –°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
  const [alternativeReason, setAlternativeReason] = useState<string>("") // –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  const [localMessages, setLocalMessages] = useState<Array<{ id: string; role: string; text: string }>>([
    {
      id: 'welcome',
      role: 'assistant',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø SmartBot - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã. –ß–µ–º –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è?'
    }
  ])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –µ—Å–ª–∏ autoStart = true
  useEffect(() => {
    console.log('useEffect triggered:', { autoStart, sessionId, analysisStarted, applicationId })
    if (autoStart && !analysisStarted && applicationId && applicationId !== '') {
      console.log('Starting AI analysis for application:', applicationId)
      startAIAnalysis()
    }
  }, [autoStart, analysisStarted, applicationId])

  const startAIAnalysis = async () => {
    console.log('startAIAnalysis called with applicationId:', applicationId)
    if (analysisStarted) {
      console.log('Analysis already started, skipping...')
      return
    }
    
    setIsLoading(true)
    setAnalysisStarted(true) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å—Ä–∞–∑—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    
    try {
      console.log('Calling api.analyzeApplication...')
      const analysis = await api.analyzeApplication(Number(applicationId))
      console.log('AI Analysis response:', analysis)
      setSessionId(analysis.session_id)
      setRelevancePercent(analysis.relevance_percent) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
      
      // –ù–æ–≤—ã–π API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å (bot_reply) –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞
      if (analysis.bot_reply) {
        const aiMessage = {
          id: `ai-question-0`,
          role: 'assistant',
          text: analysis.bot_reply
        }
        setLocalMessages(prev => [...prev, aiMessage])
      } else if (analysis.followup_questions && analysis.followup_questions.length > 0) {
        // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
        const firstQuestion = {
          id: `ai-question-0`,
          role: 'assistant',
          text: analysis.followup_questions[0]
        }
        setLocalMessages(prev => [...prev, firstQuestion])
      }
      
      console.log('AI Analysis completed:', analysis)
    } catch (error: any) {
      console.error('Failed to start AI analysis:', error)
      console.error('Error details:', error.message, error.response)
      // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
      const fallbackMessage = {
        id: 'fallback',
        role: 'assistant',
        text: `–ò–∑–≤–∏–Ω–∏—Ç–µ, AI-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${error.message || 'Unknown error'}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.`
      }
      setLocalMessages(prev => [...prev, fallbackMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputValue.trim() || isLoading || isDialogCompleted) return

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
    const userMessage = {
      id: `user-${Date.now()}`,
      role: 'user',
      text: inputValue
    }
    setLocalMessages(prev => [...prev, userMessage])
    setQuestionCount(prev => prev + 1)
    
    const userInput = inputValue
    setInputValue("")
    setIsLoading(true)
    
    try {
      console.log('handleSubmit - sessionId:', sessionId, 'userInput:', userInput)
      if (sessionId) {
        console.log('Sending message to AI assistant...')
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const chatResult = await api.sendChatMessage(Number(applicationId), sessionId, userInput)
        console.log('AI response:', chatResult)
        
        // –ù–æ–≤—ã–π API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç (bot_reply) –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞
        if (chatResult.bot_reply) {
          const botMessage = {
            id: `bot-${Date.now()}`,
            role: 'assistant',
            text: chatResult.bot_reply
          }
          setLocalMessages(prev => [...prev, botMessage])
        } else if (chatResult.bot_replies && chatResult.bot_replies.length > 0) {
          // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
          chatResult.bot_replies.forEach((reply, index) => {
            const botMessage = {
              id: `bot-${Date.now()}-${index}`,
              role: 'assistant',
              text: reply
            }
            setLocalMessages(prev => [...prev, botMessage])
          })
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        if (chatResult.relevance_percent !== undefined) {
          setRelevancePercent(chatResult.relevance_percent)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑
        if (chatResult.is_completed) {
          console.log('‚úÖ Dialog completed!')
          console.log('üîç Chat result:', chatResult)
          console.log('üîç suggest_alternative_vacancy:', chatResult.suggest_alternative_vacancy)
          console.log('üîç relevance_percent:', chatResult.relevance_percent)
          console.log('üîç vacancyId:', vacancyId)
          
          setIsDialogCompleted(true)
          onAnalysisComplete?.(chatResult)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
          if (chatResult.suggest_alternative_vacancy && vacancyId) {
            console.log('üí° Suggesting alternative vacancies')
            console.log('üîç Loading similar vacancies for vacancy ID:', vacancyId)
            setAlternativeReason(chatResult.alternative_vacancy_reason || "")
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            try {
              const similarVacancies = await api.getSimilarCompanyVacancies(Number(vacancyId))
              console.log('üì¶ Similar vacancies response:', similarVacancies)
              console.log('üìä Number of similar vacancies:', similarVacancies.similar_vacancies?.length || 0)
              
              if (similarVacancies.similar_vacancies && similarVacancies.similar_vacancies.length > 0) {
                console.log('‚úÖ Found alternative vacancies, adding to state')
                setAlternativeVacancies(similarVacancies.similar_vacancies)
                setShowAlternativeVacancies(true)
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
                const recommendationMessage = {
                  id: `recommendation-${Date.now()}`,
                  role: 'assistant',
                  text: `${chatResult.alternative_vacancy_reason || "–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥–æ–π–¥—É—Ç –¥—Ä—É–≥–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏:"}\n\n–ú—ã –Ω–∞—à–ª–∏ ${similarVacancies.similar_vacancies.length} –¥—Ä—É–≥–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "${similarVacancies.company}", –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–¥–æ–π—Ç–∏ –ª—É—á—à–µ! –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Ö –Ω–∏–∂–µ. üëá`
                }
                setLocalMessages(prev => [...prev, recommendationMessage])
                console.log('‚úÖ Recommendation message added')
              } else {
                console.log('‚ö†Ô∏è No similar vacancies found')
              }
            } catch (error) {
              console.error('‚ùå Failed to load alternative vacancies:', error)
            }
          } else {
            console.log('‚ö†Ô∏è Not suggesting alternatives:', {
              suggest: chatResult.suggest_alternative_vacancy,
              hasVacancyId: !!vacancyId
            })
          }
        }
      } else {
        console.warn('No sessionId - using fallback responses')
        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏
        setTimeout(() => {
          const botResponses = [
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ.',
            '–û—Ç–ª–∏—á–Ω–æ! –ê –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏?',
            '–ü–æ–Ω—è—Ç–Ω–æ. –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?',
            '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–µ—à–∞—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
            '–•–æ—Ä–æ—à–æ. –ü–æ—á–µ–º—É –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–µ–π?',
            '–°–ø–∞—Å–∏–±–æ! –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏?'
          ]
          
          const randomResponse = botResponses[Math.floor(Math.random() * botResponses.length)]
          
          const botMessage = {
            id: `bot-${Date.now()}`,
            role: 'assistant',
            text: randomResponse
          }
          setLocalMessages(prev => [...prev, botMessage])
        }, 1000)
      }
    } catch (error: any) {
      console.error('Failed to send message to AI:', error)
      console.error('Error details:', error.message, error.response)
      // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º
      setTimeout(() => {
        const botMessage = {
          id: `bot-${Date.now()}`,
          role: 'assistant',
          text: `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ. (–û—à–∏–±–∫–∞: ${error.message || 'Unknown'})`
        }
        setLocalMessages(prev => [...prev, botMessage])
      }, 1000)
    } finally {
      setIsLoading(false)
    }
  }

  // –ï—Å–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (embedded) {
    return (
      <Card className="w-full h-full flex flex-col border-0 shadow-none">
        <div className="flex items-center justify-between p-4 border-b bg-primary text-primary-foreground rounded-t-lg">
          <div className="flex items-center gap-2">
            <MessageCircle className="h-5 w-5" />
            <div>
              <h3 className="font-semibold">SmartBot</h3>
              <p className="text-xs opacity-90">AI Recruitment Assistant</p>
            </div>
          </div>
        </div>

        <div className="px-4 py-2 bg-muted/50 border-b">
          <div className="flex items-center justify-between text-sm gap-4">
            <div className="flex items-center gap-2">
              <span className="text-muted-foreground">–°–æ–æ–±—â–µ–Ω–∏–π:</span>
              <span className="font-medium">{questionCount}</span>
            </div>
          </div>
        </div>

        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {localMessages.map((message) => (
            <div key={message.id} className={cn("flex", message.role === "user" ? "justify-end" : "justify-start")}>
              <div
                className={cn(
                  "max-w-[80%] rounded-lg px-4 py-2",
                  message.role === "user" ? "bg-primary text-primary-foreground" : "bg-muted",
                )}
              >
                <p className="text-sm leading-relaxed">
                  {message.text}
                </p>
              </div>
            </div>
          ))}
        </div>

        <form onSubmit={handleSubmit} className="p-4 border-t">
          {isDialogCompleted && (
            <div className="mb-3 p-3 bg-green-50 border border-green-200 rounded-lg text-sm text-green-800">
              ‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥–∞–Ω —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!
            </div>
          )}
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder={isDialogCompleted ? "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω" : isLoading ? "AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –æ—Ç–≤–µ—Ç..." : "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."}
              className="flex-1"
              disabled={isLoading || isDialogCompleted}
            />
            <Button
              type="submit"
              size="icon"
              disabled={!inputValue.trim() || isLoading || isDialogCompleted}
            >
              {isLoading ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Send className="h-4 w-4" />
              )}
            </Button>
          </div>
        </form>
      </Card>
    )
  }

  return (
    <>
      <Button
        onClick={() => setIsOpen(!isOpen)}
        className={cn(
          "fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg z-50",
          "bg-primary hover:bg-primary/90 transition-all duration-200",
          isOpen && "scale-0",
        )}
      >
        <MessageCircle className="h-6 w-6" />
      </Button>

      <Card
        className={cn(
          "fixed bottom-6 right-6 w-96 h-[600px] shadow-2xl z-50 flex flex-col",
          "transition-all duration-300 origin-bottom-right",
          isOpen ? "scale-100 opacity-100" : "scale-0 opacity-0",
        )}
      >
        <div className="flex items-center justify-between p-4 border-b bg-primary text-primary-foreground rounded-t-lg">
          <div className="flex items-center gap-2">
            <MessageCircle className="h-5 w-5" />
            <div>
              <h3 className="font-semibold">SmartBot</h3>
              <p className="text-xs opacity-90">AI Recruitment Assistant</p>
            </div>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsOpen(false)}
            className="h-8 w-8 text-primary-foreground hover:bg-primary-foreground/20"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>

        <div className="px-4 py-2 bg-muted/50 border-b">
          <div className="flex items-center justify-between text-sm">
            <span className="text-muted-foreground">–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>
            <span className="font-medium">{questionCount}</span>
          </div>
        </div>

        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {localMessages.map((message) => (
            <div key={message.id} className={cn("flex", message.role === "user" ? "justify-end" : "justify-start")}>
              <div
                className={cn(
                  "max-w-[80%] rounded-lg px-4 py-2",
                  message.role === "user" ? "bg-primary text-primary-foreground" : "bg-muted",
                )}
              >
                <p className="text-sm leading-relaxed whitespace-pre-wrap">
                  {message.text}
                </p>
              </div>
            </div>
          ))}
          
          {/* –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ */}
          {showAlternativeVacancies && alternativeVacancies.length > 0 && (
            <div className="space-y-3 mt-4">
              {alternativeVacancies.map((vacancy) => (
                <Card key={vacancy.id} className="p-4 bg-blue-50 border-blue-200">
                  <h4 className="font-semibold text-sm mb-1">{vacancy.title}</h4>
                  <p className="text-xs text-muted-foreground mb-2">
                    {vacancy.location} ‚Ä¢ {vacancy.salary_min && vacancy.salary_max 
                      ? `${vacancy.salary_min.toLocaleString()} - ${vacancy.salary_max.toLocaleString()} ‚Ç∏` 
                      : "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
                  </p>
                  <p className="text-xs mb-3 line-clamp-2">{vacancy.description}</p>
                  <Button 
                    size="sm" 
                    variant="default"
                    className="w-full"
                    onClick={() => window.open(`/vacancies/${vacancy.id}`, '_blank')}
                  >
                    –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é ‚Üí
                  </Button>
                </Card>
              ))}
            </div>
          )}
        </div>

        <form onSubmit={handleSubmit} className="p-4 border-t">
          {isDialogCompleted && (
            <div className="mb-3 p-3 bg-green-50 border border-green-200 rounded-lg text-sm text-green-800">
              ‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥–∞–Ω —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!
            </div>
          )}
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder={isDialogCompleted ? "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω" : isLoading ? "AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –æ—Ç–≤–µ—Ç..." : "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."}
              className="flex-1"
              disabled={isLoading || isDialogCompleted}
            />
            <Button
              type="submit"
              size="icon"
              disabled={!inputValue.trim() || isLoading || isDialogCompleted}
            >
              {isLoading ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Send className="h-4 w-4" />
              )}
            </Button>
          </div>
        </form>
      </Card>
    </>
  )
}
