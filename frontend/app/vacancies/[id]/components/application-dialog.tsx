"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { api, type Vacancy } from "@/lib/api"
import { useToast } from "@/hooks/use-toast"
import { ChatbotWidget } from "@/components/chatbot-widget"
import { Loader2, Upload, FileText, X } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"

interface ApplicationDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  vacancy: Vacancy
  userId: number
}

export function ApplicationDialog({ open, onOpenChange, vacancy, userId }: ApplicationDialogProps) {
  const router = useRouter()
  const { toast } = useToast()
  const [applicationId, setApplicationId] = useState<string | null>(null)
  const [isCreating, setIsCreating] = useState(false)
  const [resumeFile, setResumeFile] = useState<File | null>(null)
  const [isUploadingResume, setIsUploadingResume] = useState(false)
  const [isAnalysisCompleted, setIsAnalysisCompleted] = useState(false)

  useEffect(() => {
    if (!open) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞
      setApplicationId(null)
      setResumeFile(null)
      setIsAnalysisCompleted(false)
    }
  }, [open])

  const handleResumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 10MB)
      if (file.size > 10 * 1024 * 1024) {
        toast({
          title: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
          description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 10MB",
          variant: "destructive",
        })
        return
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain']
      if (!allowedTypes.includes(file.type)) {
        toast({
          title: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç",
          description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF, DOC, DOCX –∏–ª–∏ TXT —Ñ–∞–π–ª",
          variant: "destructive",
        })
        return
      }
      
      setResumeFile(file)
    }
  }

  const removeResume = () => {
    setResumeFile(null)
  }

  const createApplication = async () => {
    setIsCreating(true)
    try {
      const newApplication = await api.createApplication({
        vacancy_id: vacancy.id,
        cover_letter: resumeFile ? `Resume: ${resumeFile.name}` : "",
      })
      setApplicationId(String(newApplication.id))
      console.log('ApplicationDialog: applicationId set to:', String(newApplication.id))
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—é–º–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –ù–ê–ü–†–Ø–ú–£–Æ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º XMLHttpRequest
      if (resumeFile) {
        setIsUploadingResume(true)
        try {
          console.log('üöÄ [BROWSER] Uploading file:', resumeFile.name, 'Size:', resumeFile.size)
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º XMLHttpRequest –≤–º–µ—Å—Ç–æ fetch, —á—Ç–æ–±—ã Next.js –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –∑–∞–ø—Ä–æ—Å
          console.log('üîç [DEBUG] typeof XMLHttpRequest:', typeof XMLHttpRequest)
          console.log('üîç [DEBUG] window exists:', typeof window !== 'undefined')
          
          await new Promise<void>((resolve, reject) => {
            const xhr = new XMLHttpRequest()
            const formData = new FormData()
            formData.append("file", resumeFile)
            
            const token = localStorage.getItem("access_token")
            const directUrl = `http://localhost:8000/applications/${newApplication.id}/upload-resume`
            
            console.log('üåê [XHR] Direct upload to:', directUrl)
            console.log('üåê [XHR] File size before send:', resumeFile.size)
            
            xhr.open('POST', directUrl, true)
            if (token) {
              xhr.setRequestHeader('Authorization', `Bearer ${token}`)
            }
            
            xhr.upload.onprogress = (e) => {
              console.log(`üìä [XHR] Upload progress: ${e.loaded}/${e.total}`)
            }
            
            xhr.onload = () => {
              console.log('üì° [XHR] Response status:', xhr.status)
              console.log('üì° [XHR] Response text:', xhr.responseText)
              if (xhr.status >= 200 && xhr.status < 300) {
                console.log('‚úÖ Resume uploaded successfully')
                resolve()
              } else {
                reject(new Error(`Upload failed with status ${xhr.status}`))
              }
            }
            
            xhr.onerror = (e) => {
              console.error('‚ùå [XHR] Network error:', e)
              reject(new Error('Network error during upload'))
            }
            
            console.log('üöÄ [XHR] Sending request...')
            xhr.send(formData)
          })
        } catch (error) {
          console.error("‚ùå Failed to upload resume:", error)
          toast({
            title: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ, –Ω–æ –æ—Ç–∫–ª–∏–∫ —Å–æ–∑–¥–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ –ø–æ–∑–∂–µ.",
            variant: "destructive",
          })
        } finally {
          setIsUploadingResume(false)
        }
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
      setTimeout(() => {
        // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ ChatbotWidget —á–µ—Ä–µ–∑ autoStart
      }, 100)
      
      toast({
        title: "–û—Ç–∫–ª–∏–∫ —Å–æ–∑–¥–∞–Ω!",
        description: "AI-–±–æ—Ç SmartBot –≥–æ—Ç–æ–≤ –∑–∞–¥–∞—Ç—å –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞–∫–∞–Ω—Å–∏–∏.",
      })
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–∫–ª–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive",
      })
      onOpenChange(false)
    } finally {
      setIsCreating(false)
    }
  }

  const handleStartChat = () => {
    createApplication()
  }

  const handleAnalysisComplete = async (analysis: any) => {
    console.log('Analysis completed:', analysis)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    if (applicationId && analysis) {
      try {
        // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î —á–µ—Ä–µ–∑ API
        console.log(`Relevance: ${analysis.relevance_percent}%`)
        console.log('Reasons:', analysis.reasons)
        console.log('Summary:', analysis.summary_for_employer)
      } catch (error) {
        console.error('Failed to save analysis:', error)
      }
    }
    
    toast({
      title: "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
      description: `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${analysis.relevance_percent || 0}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è. –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –æ—Ç–∫–ª–∏–∫–µ.`,
    })
    
    setIsAnalysisCompleted(true)
    
    // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∑–∞–∫—Ä–æ–µ—Ç –µ–≥–æ –∫–Ω–æ–ø–∫–æ–π X
    // if (applicationId) {
    //   router.push(`/applications/${applicationId}`)
    // }
    // onOpenChange(false)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px] p-0 gap-0" onInteractOutside={(e) => {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        if (applicationId) {
          e.preventDefault()
        }
      }}>
        <DialogHeader className="p-6 pb-4">
          <DialogTitle>–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</DialogTitle>
          <DialogDescription>
            {vacancy.title} –≤ {vacancy.company}
          </DialogDescription>
        </DialogHeader>

        <div className="px-6 pb-6">
          {isCreating ? (
            <div className="flex flex-col items-center justify-center py-12 space-y-4">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <p className="text-sm text-muted-foreground">–°–æ–∑–¥–∞—ë–º –≤–∞—à –æ—Ç–∫–ª–∏–∫...</p>
            </div>
          ) : applicationId ? (
            <div className="space-y-4">
              <div className="bg-muted/50 rounded-lg p-4 text-sm">
                <p className="text-muted-foreground">
                  <strong className="text-foreground">AI-–±–æ—Ç SmartBot</strong> –≥–æ—Ç–æ–≤ –∑–∞–¥–∞—Ç—å –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞–∫–∞–Ω—Å–∏–∏.
                  –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é –ª—É—á—à–µ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É.
                </p>
              </div>
              {resumeFile && (
                <div className="bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-lg p-3 flex items-center gap-3">
                  <FileText className="h-5 w-5 text-green-600 dark:text-green-400 flex-shrink-0" />
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-green-900 dark:text-green-100 truncate">
                      {resumeFile.name}
                    </p>
                    <p className="text-xs text-green-600 dark:text-green-400">
                      {(resumeFile.size / 1024).toFixed(1)} KB
                    </p>
                  </div>
                </div>
              )}
              <div className="relative h-[500px] border rounded-lg overflow-hidden">
                <ChatbotWidget
                  applicationId={applicationId}
                  vacancyId={String(vacancy.id)}
                  onAnalysisComplete={handleAnalysisComplete}
                  embedded={true}
                  autoStart={true}
                />
              </div>
              
              {isAnalysisCompleted && (
                <div className="flex gap-3 pt-4">
                  <Button
                    onClick={() => onOpenChange(false)}
                    className="flex-1"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </Button>
                  {applicationId && (
                    <Button
                      variant="outline"
                      onClick={() => {
                        router.push(`/applications/${applicationId}`)
                        onOpenChange(false)
                      }}
                      className="flex-1"
                    >
                      –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ
                    </Button>
                  )}
                </div>
              )}
            </div>
          ) : (
            <div className="space-y-6">
              <div className="bg-muted/50 rounded-lg p-4 text-sm">
                <p className="text-muted-foreground">
                  <strong className="text-foreground">AI-–±–æ—Ç SmartBot</strong> –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é. 
                  –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∑—é–º–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º.
                </p>
              </div>
              
              <div className="space-y-3">
                <Label htmlFor="resume-upload" className="text-sm font-medium">
                  –†–µ–∑—é–º–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                </Label>
                
                {resumeFile ? (
                  <div className="flex items-center gap-3 p-4 border-2 border-dashed rounded-lg bg-muted/30">
                    <FileText className="h-8 w-8 text-primary flex-shrink-0" />
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate">{resumeFile.name}</p>
                      <p className="text-xs text-muted-foreground">
                        {(resumeFile.size / 1024).toFixed(1)} KB
                      </p>
                    </div>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={removeResume}
                      className="flex-shrink-0"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ) : (
                  <label
                    htmlFor="resume-upload"
                    className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-lg cursor-pointer hover:bg-muted/50 transition-colors"
                  >
                    <div className="flex flex-col items-center justify-center pt-5 pb-6">
                      <Upload className="h-8 w-8 text-muted-foreground mb-2" />
                      <p className="text-sm text-muted-foreground">
                        <span className="font-semibold">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</span> –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª
                      </p>
                      <p className="text-xs text-muted-foreground mt-1">
                        PDF, DOC, DOCX –∏–ª–∏ TXT (–º–∞–∫—Å. 10MB)
                      </p>
                    </div>
                    <input
                      id="resume-upload"
                      type="file"
                      className="hidden"
                      accept=".pdf,.doc,.docx,.txt"
                      onChange={handleResumeChange}
                    />
                  </label>
                )}
              </div>

              <div className="flex gap-3">
                <Button
                  variant="outline"
                  onClick={() => onOpenChange(false)}
                  className="flex-1"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button
                  onClick={handleStartChat}
                  className="flex-1"
                >
                  –ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º
                </Button>
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}
