#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI Assistant API –±–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def test_parse_cv():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ ===")
    data = {
        "text": "–ê–ª–º–∞—Ç—ã, Backend 2 –≥–æ–¥–∞, FastAPI, –∞–Ω–≥–ª B2, 600000 KZT, —Ñ—É–ª–ª—Ç–∞–π–º",
        "kind": "cv"
    }
    
    response = requests.post(f"{BASE_URL}/parse", json=data)
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        print(f"–ì–æ—Ä–æ–¥: {result['candidate']['city']}")
        print(f"–û–ø—ã—Ç: {result['candidate']['experience_years']} –ª–µ—Ç")
        print(f"–ü–æ–∑–∏—Ü–∏—è: {result['candidate']['position']}")
        print(f"–ù–∞–≤—ã–∫–∏: {result['candidate']['skills']}")
        print(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {result['candidate']['salary_expectation']}")
        return result['candidate']
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)
        return None

def test_parse_vacancy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ===")
    data = {
        "text": "–ò—â–µ–º Backend –≤ –ê–ª–º–∞—Ç—ã, 3+ –≥–æ–¥–∞, Python/FastAPI, —Ñ—É–ª–ª—Ç–∞–π–º, 500-700 —Ç—ã—Å.",
        "kind": "vacancy"
    }
    
    response = requests.post(f"{BASE_URL}/parse", json=data)
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        print(f"–ì–æ—Ä–æ–¥: {result['vacancy']['city']}")
        print(f"–û–ø—ã—Ç: {result['vacancy']['min_experience_years']} –ª–µ—Ç")
        print(f"–ü–æ–∑–∏—Ü–∏—è: {result['vacancy']['required_position']}")
        print(f"–ù–∞–≤—ã–∫–∏: {result['vacancy']['must_have_skills']}")
        print(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {result['vacancy']['salary_min']}-{result['vacancy']['salary_max']}")
        return result['vacancy']
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)
        return None

def test_analyze():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ===")
    data = {
        "cv_text": "–ê–ª–º–∞—Ç—ã, Backend 2 –≥–æ–¥–∞, FastAPI, –∞–Ω–≥–ª B2, 600000 KZT, —Ñ—É–ª–ª—Ç–∞–π–º",
        "vacancy_text": "–ò—â–µ–º Backend –≤ –ê–ª–º–∞—Ç—ã, 3+ –≥–æ–¥–∞, Python/FastAPI, —Ñ—É–ª–ª—Ç–∞–π–º, 500-700 —Ç—ã—Å."
    }
    
    response = requests.post(f"{BASE_URL}/analyze", json=data)
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        print(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['relevance_percent']}%")
        print(f"–ü—Ä–∏—á–∏–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {result['reasons']}")
        print(f"–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: {result['followup_questions'][:2]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
        print(f"Session ID: {result['session_id']}")
        return result['session_id']
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)
        return None

def test_chat(session_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á–∞—Ç —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º"""
    if not session_id:
        print("\n‚ùå –ù–µ—Ç session_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞")
        return
        
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ ===")
    data = {
        "session_id": session_id,
        "message_from_candidate": "–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Python, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª –µ–≥–æ –≤ —Ä–µ–∑—é–º–µ. –¢–∞–∫–∂–µ –∏–∑—É—á–∞—é –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."
    }
    
    response = requests.post(f"{BASE_URL}/chat/turn", json=data)
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        print(f"–û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞: {result['bot_replies']}")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['relevance_percent']}%")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)

def test_session_info(session_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
    if not session_id:
        print("\n‚ùå –ù–µ—Ç session_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
        return
        
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ ===")
    response = requests.get(f"{BASE_URL}/sessions/{session_id}")
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        print(f"–°–æ–∑–¥–∞–Ω–∞: {result['created_at']}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {len(result['chat'])}")
        print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å {result['last_analysis']['relevance']}%")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Assistant API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        response = requests.get(f"{BASE_URL}/docs")
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: uvicorn main:app --reload")
            return
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: uvicorn main:app --reload")
        return
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ endpoints
    cv = test_parse_cv()
    vacancy = test_parse_vacancy()
    session_id = test_analyze()
    test_chat(session_id)
    test_session_info(session_id)
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
