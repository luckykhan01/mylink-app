"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
–ó–∞–ø—É—Å–∫: python test_simple.py
"""
import requests
import json

BASE_URL = "http://localhost:8001"

def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ ===")
    response = requests.get(f"{BASE_URL}/health")
    print(f"Status: {response.status_code}")
    print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    return response.status_code == 200

def test_chat_start():
    """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞"""
    print("\n=== –¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ ===")
    
    vacancy_text = """
    Senior Python Developer
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Python 5+ –ª–µ—Ç
    - –ó–Ω–∞–Ω–∏–µ Django, FastAPI
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
    - Git, Docker
    - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ - B2+
    
    –õ–æ–∫–∞—Ü–∏—è: –ê–ª–º–∞—Ç—ã (–æ—Ñ–∏—Å)
    –ó–∞—Ä–ø–ª–∞—Ç–∞: 500,000 - 700,000 —Ç–≥
    """
    
    cv_text = """
    –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
    Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    
    –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 3 –≥–æ–¥–∞
    –ù–∞–≤—ã–∫–∏: Python, Django, PostgreSQL, Git
    –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: B1
    –õ–æ–∫–∞—Ü–∏—è: –ê—Å—Ç–∞–Ω–∞
    """
    
    payload = {
        "vacancy_text": vacancy_text,
        "cv_text": cv_text
    }
    
    response = requests.post(f"{BASE_URL}/chat/start", json=payload)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"\nSession ID: {data['session_id']}")
        print(f"Relevance: {data['relevance_percent']}%")
        print(f"Stage: {data['dialog_stage']}")
        print(f"Completed: {data['is_completed']}")
        print(f"\nBot reply:\n{data['bot_reply']}")
        print(f"\nSummary for employer: {data['summary_for_employer']}")
        print(f"Reasons: {data['reasons']}")
        return data
    else:
        print(f"Error: {response.text}")
        return None

def test_chat_turn(session_id):
    """–¢–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    print("\n=== –¢–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ===")
    
    payload = {
        "session_id": session_id,
        "message_from_candidate": "–î–∞, —è –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –ê–ª–º–∞—Ç—ã –∏ –≥–æ—Ç–æ–≤ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–æ B2"
    }
    
    response = requests.post(f"{BASE_URL}/chat/turn", json=payload)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"\nRelevance: {data['relevance_percent']}%")
        print(f"Stage: {data['dialog_stage']}")
        print(f"Completed: {data['is_completed']}")
        print(f"\nBot reply:\n{data['bot_reply']}")
        print(f"\nSummary for employer: {data['summary_for_employer']}")
        print(f"Reasons: {data['reasons']}")
        return data
    else:
        print(f"Error: {response.text}")
        return None

def test_get_session(session_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ ===")
    
    response = requests.get(f"{BASE_URL}/sessions/{session_id}")
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"Session info: {json.dumps(data, indent=2, ensure_ascii=False)}")
        return data
    else:
        print(f"Error: {response.text}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ SmartBot AI Assistant - Simple Test")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    if not test_health():
        print("\n‚ùå Service is not healthy. Please start the service first:")
        print("   python main.py")
        return
    
    print("\n‚úÖ Service is healthy!")
    
    # 2. –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
    session_data = test_chat_start()
    if not session_data:
        print("\n‚ùå Failed to start chat")
        return
    
    print("\n‚úÖ Chat started successfully!")
    session_id = session_data['session_id']
    
    # 3. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
    if not session_data['is_completed']:
        turn_data = test_chat_turn(session_id)
        if turn_data:
            print("\n‚úÖ Chat turn completed!")
    
    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    test_get_session(session_id)
    
    print("\n" + "=" * 50)
    print("‚úÖ All tests completed!")

if __name__ == "__main__":
    try:
        main()
    except requests.exceptions.ConnectionError:
        print("\n‚ùå Cannot connect to AI Assistant service.")
        print("   Please make sure the service is running:")
        print("   python main.py")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")

